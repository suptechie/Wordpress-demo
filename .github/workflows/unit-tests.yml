name: Unit Tests

on:
  push:
    branches:
      - main
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PHPCS_DEV: 'dev-master'
  UTILS_DEV: 'dev-develop'
  EXTRA_DEV: 'dev-develop'

jobs:
  # Runs the test suite against all supported branches and combinations.
  # Linting is performed on all jobs run with dependencies `stable`.
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [ '5.5', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2', '8.4' ]
        dependencies: [ 'lowest', 'stable' ]
        extensions: [ '' ]
        coverage: [false]

        include:
          - php: '7.2'
            dependencies: 'stable'
            extensions: ':mbstring' # = Disable Mbstring.
            coverage: true # Make sure coverage is recorded for this too.

          # Run code coverage builds against high/low PHP and high/low PHPCS.
          - php: '5.4'
            dependencies: 'stable'
            extensions: ''
            coverage: true
          - php: '5.4'
            dependencies: 'lowest'
            extensions: ''
            coverage: true
          - php: '8.3'
            dependencies: 'stable'
            extensions: ''
            coverage: true
          - php: '8.3'
            dependencies: 'lowest'
            extensions: ''
            coverage: true

          # Test against dev versions of all dependencies with select PHP versions for early detection of issues.
          - php: '5.4'
            dependencies: 'dev'
            extensions: ''
            coverage: false
          - php: '7.0'
            dependencies: 'dev'
            extensions: ''
            coverage: false
          - php: '7.4'
            dependencies: 'dev'
            extensions: ''
            coverage: false
          - php: '8.3'
            dependencies: 'dev'
            extensions: ''
            coverage: false

          # Add extra build to test against PHPCS 4.
          #- php: '7.4'
          #  dependencies: '4.0.x-dev as 3.9.99'

    name: PHP ${{ matrix.php }} on PHPCS ${{ matrix.dependencies }}

    continue-on-error: ${{ matrix.php == '8.4' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # With stable PHPCS dependencies, allow for PHP deprecation notices.
      # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
      - name: Setup ini config
        id: set_ini
        run: |
          if [ "${{ matrix.dependencies }}" != "dev" ]; then
            echo 'PHP_INI=error_reporting=E_ALL & ~E_DEPRECATED, display_errors=On' >> $GITHUB_OUTPUT
          else
            echo 'PHP_INI=error_reporting=-1, display_errors=On' >> $GITHUB_OUTPUT
          fi

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          ini-values: ${{ steps.set_ini.outputs.PHP_INI }}
          coverage: ${{ matrix.coverage && 'xdebug' || 'none' }}
          tools: cs2pr

      - name: "Composer: set PHPCS dependencies for tests (dev)"
        if: ${{ matrix.dependencies == 'dev' }}
        run: >
          composer require --no-update --no-scripts --no-interaction
          squizlabs/php_codesniffer:"${{ env.PHPCS_DEV }}"
          phpcsstandards/phpcsutils:"${{ env.UTILS_DEV }}"
          phpcsstandards/phpcsextra:"${{ env.EXTRA_DEV }}"

      - name: Install Composer dependencies
        uses: ramsey/composer-install@v3
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: "Composer: downgrade PHPCS dependencies for tests (lowest)"
        if: ${{ matrix.dependencies == 'lowest' }}
        run: >
          composer update --prefer-lowest --no-scripts --no-interaction
          squizlabs/php_codesniffer
          phpcsstandards/phpcsutils
          phpcsstandards/phpcsextra

      - name: Lint PHP files against parse errors
        if: ${{ matrix.dependencies == 'stable' }}
        run: composer lint -- --checkstyle | cs2pr

      - name: Run the unit tests without code coverage
        if: ${{ matrix.coverage == false }}
        run: composer run-tests

      - name: Run the unit tests with code coverage
        if: ${{ matrix.coverage == true  }}
        run: composer coverage

      - name: Send coverage report to Codecov
        if: ${{ success() && matrix.coverage == true }}
        uses: codecov/codecov-action@v4
        with:
          files: ./build/logs/clover.xml
          fail_ci_if_error: true
          verbose: true
